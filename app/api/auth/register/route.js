import { NextResponse } from "next/server"
import bcrypt from "bcryptjs"
import connectDB from "@/utils/db"
import User from "@/models/User"

export async function POST(request) {
  try {
    console.log("=== REGISTRATION START ===")
    await connectDB()

    const body = await request.json()
    console.log("Registration request body:", { ...body, password: "[HIDDEN]" })

    const { name, email, password, role, department } = body

    // Validate required fields
    if (!name || !email || !password || !role || !department) {
      console.log("‚ùå Missing required fields")
      return NextResponse.json({ error: "All fields are required" }, { status: 400 })
    }

    // Validate field types and values
    if (typeof name !== "string" || name.trim().length < 2) {
      return NextResponse.json({ error: "Name must be at least 2 characters" }, { status: 400 })
    }

    if (typeof email !== "string" || !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
      return NextResponse.json({ error: "Invalid email format" }, { status: 400 })
    }

    if (typeof password !== "string" || password.length < 6) {
      return NextResponse.json({ error: "Password must be at least 6 characters" }, { status: 400 })
    }

    if (!["manager", "employee"].includes(role)) {
      return NextResponse.json({ error: "Role must be either manager or employee" }, { status: 400 })
    }

    if (!["Engineering", "Consulting", "Finance", "Customer Support"].includes(department)) {
      return NextResponse.json({ error: "Invalid department selected" }, { status: 400 })
    }

    // Check if user already exists
    const existingUser = await User.findOne({ email: email.toLowerCase().trim() })
    if (existingUser) {
      console.log("‚ùå User already exists:", email)
      return NextResponse.json({ error: "User already exists with this email" }, { status: 400 })
    }

    // Hash password
    console.log("üîê Hashing password...")
    const hashedPassword = await bcrypt.hash(password, 12)

    // Create user - employeeId will be auto-generated by pre-save hook
    console.log("üë§ Creating user...")
    const userData = {
      name: name.trim(),
      email: email.toLowerCase().trim(),
      password: hashedPassword,
      role,
      department,
    }

    const user = await User.create(userData)
    console.log("‚úÖ User created successfully:", {
      id: user._id,
      email: user.email,
      employeeId: user.employeeId,
      role: user.role,
      department: user.department,
    })

    // Return user without password
    const userResponse = {
      _id: user._id,
      name: user.name,
      email: user.email,
      role: user.role,
      department: user.department,
      employeeId: user.employeeId,
      createdAt: user.createdAt,
      updatedAt: user.updatedAt,
    }

    console.log("=== REGISTRATION SUCCESS ===")
    return NextResponse.json(
      {
        message: "User created successfully",
        user: userResponse,
      },
      { status: 201 },
    )
  } catch (error) {
    console.error("‚ùå Registration error:", error)

    // Handle specific MongoDB errors
    if (error.code === 11000) {
      const field = Object.keys(error.keyPattern)[0]
      return NextResponse.json({ error: `${field} already exists` }, { status: 400 })
    }

    if (error.name === "ValidationError") {
      const messages = Object.values(error.errors).map((err) => err.message)
      return NextResponse.json({ error: messages.join(", ") }, { status: 400 })
    }

    return NextResponse.json({ error: "Internal server error" }, { status: 500 })
  }
}
